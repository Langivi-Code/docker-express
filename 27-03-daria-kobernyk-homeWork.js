/*

------------ Питання до блоку №1 - змінні --------------

01 Що таке змінна, для чого вона потрібна

Змінна - це адреса на область пам'яті.

02 Як визначити змінну, які варіанти

Візначити змінну можна за допомогою таких ключевих слів, як: const, let, var.

03 Різниця var / let

Головна різниця полягає в області видимості.

04 Різниця const / let

Різниця полягає у неможливості перезапису данних змінної const. У let перезапис данних можливий.

05 До чого призведе повторне визначення змінної, наприклад: let name = 'Helen'; let name = 'Mark';

Призведе до перезапису данних змінної let.

06 Правила назви змінної, які спеціальні символи доступні, які ні

Змінні не повинні починатися з цифр. Можна використовувати букви, цифри, знак доллара $ та нижнє 
підкреслення _.

07 Чи чуттєві до реєстру змінні

Так.

08 Нелатинські літери в назві змінних дозволені чи ні, чому?

Дозволені, за стандартом ECMAScript

09 Якими ключовими словами не можна називати змінні, наведіть хоча б 10 прикладів.

До заборонених слів належать:
- var
- let
- const
- class
- in
- instanceof
- new
- super
- if
- else

10 Використання use strict. В чому особливості створення змінної в даному режимі

У випадку, коли змінна не існує, її використання, у режимі 'use strict' буде помилкою.

11 В чому різниця констант, що оголошені через const маленькими та великими літерами. 
Наприклад const name та const NAME

Це дві різні константи, бо JS чутливий до реєстру.

12 Які правила іменування змінних вам відомі

Змінні повинні нести у назві сенс. Гарним показником є написання змінних за допомогою camelCase
та використання лише латинських літер.


---------- Питання до блоку №2 - типи даних -------------

01 Які існують типи даних

Iснує 8 типів данних:
- string
- number
- boolean
- object
- bigint
- null
- undefined
- symbol

02 Яка різниця між поднійними та одинарними лапками

Ніякої

03 Зворотні лапки мають розширену функціональність. Яку?

До них можна додати вираз за допомогою ${}

04 Різниця null та undefined

null синонім порожнеча, нічого
undefined синонім не визначено

05 Оператор перевірки типу, що означає та який синтаксис (два варіанти)

Оператор перевірки типів потрібен для визначення типу данних у вигляді строки.
typeof(x) typeof x

06 Який символ в кінці числа позначає, що це BigInt

n

07 Що повертає typeof null, чому?

Повертає об'єкт, бо це помилка у js.

08 Який тип даних не є примітивним, чому?

Object не є примітивом, бо може містити в собі не тільки прості значення.

09 Що означає вислів: “JS динамічно типізований”

Це означає, що змінні не прив'язуються до типу данних.

10 Що повертає typeof String, typeof Number, typeof Boolean, typeof null, typeof undefined,
typeof parseInt, typeof 10n, typeof 10, typeof 10.5, typeof ‘Helen’, typeof true, typeof prompt.
Як ви можете пояснити таку поведінку? 

- function
- function
- function
- object
- undefined
- function
- bigint
- number
- string
- boolean
- function
У всіх випадаках, відповідно до значення виводиться правильний тип данних, окрім null. Щодо функцій,
при взаємодії з об'єктами, що реалізують [[call]], специфікація оператору typeof визначає іншу поведінку

11 Назвіть «спеціальні числові значення». Що вони означають?

Infinity(нескінченність), -Infinity(негативна нескінченність), NaN(Not a Number)

12 Якщо десь в математичному вираженні є NaN, то що буде результатом обчислень з його участю?

NaN

-------------- Питання до блоку №3.1 - базові оператори ----------------

01 Які існують оператори

Математичні оператори, присвоювання, порівняння, бітові, логічні, рядкові, тернарні, кома, унарні 
та оператори відношення.

02 Що таке операнд, унарний та бінарний оператор

Операнд - це те, до чого застосовується оператор. Унарний оператор - оператор, що застосовується лише
до одного операнду. Бінарний оператор - це оператор, що застосовується до двох операндів.

03 Упорядкуйте оператори відповідно до їх пріоритетів (1 - найнижчий, 8 - найвищий). Унарний плюс, 
Возведення у ступінь, Унарний мінус, Множення, Присвоювання, Ділення, Бінарний плюс, Бінарний мінус. Наприклад: 1 - множення, 2 - унарний плюс, 3 - ділення і т.д

Унарний плюс
Унарний мінус
Возведення у ступінь
Множення
Ділення
Бінарний плюс
Бінарний мінус
Присвоювання

04 Як перетворити не числа в числа

За допомогою +... або Number(...).

05 Розкажіть що таке інкремент та декремент

Інкремент - оператор, що збільшує змінну на 1. Декремент - оператор, що зменшує змінну на 1.

06 Яка форма є у інкременту та декременту, розкажіть їх особливості

Префіксна форма застосовується попереду змінної. Постфіксна - позаду.

07 Як працює бінарний плюс зі строками, а з числами та строками у вигляді чисел

Він їх конкатинує.

08 Що буде результатом alert( '186' + 20 );  alert( 259 + '13' ); 

18620 та 25913.

09 Що буде результатом: ‘my name ’ + ‘is ’ + `${name}`; let name = ‘Helen’;

Uncaught ReferenceError

10 Що буде результатом: ‘my name ’ + ‘is ’ + `${name}`; var name = ‘Helen’

my name is

11 Що буде результатом: let name = ‘Helen’; ‘my name ’ + ‘is ’ + `${name}`; 

my name is Helen

12 Що буде результатом: var name = ‘Helen’; ‘my name ’ + ‘is ’ + `${name}`; 

my name is Helen

13 В чому різниця 11 та 12 пункту

У варінті об'явлення змінної

14 Що буде результатом: let number = -589; alert (+ number);

-589

15 Що буде результатом: alert (+ true); alert (+ false); alert (+ ""); alert (+ "something");

1
0
0
NaN

16 Скільки буде 100%2; 100%3; 100%4; 100%5; 100%6;

0
1
0
0
4

17 Що  поверне 89++

89

Питання до блоку №3.2 - оператори порівняння

01 Які існують оператори

== рівність
=== строга рівність
!= нерівність
!== строга нерівність
> більше ніж
< менше ніж
<= менше чи дорівнює

02 Який тип даних повертає оператор порівняння (<,>,>=,<= і т.д)

boolean

03 Як порівнюються рядки

Рядки порівнюються посимвольно

04 Що відбувається зі значеннями різних типів при порівнянні? Чи завжди типи приводяться. 
Наприклад false в 0 при порівнянні?

У порівнянні різних типів, значення приводяться до числа. Типи приводяться незавжди. true

05 Яке кодування використовується замість алфавіту

Кодування Unicode

06 Що більше ‘A’ чи ‘a’

‘a’

07 До якого числа зводяться null і undefined

undefined NaN, null 0

08 Що є результатом null == undefined; null === undefined;

true, false, бо строге порівняння не порівнює типи

09 Що є результатом let a = 0; alert( Boolean(a) ); Чому?

false. Перевірка рівності перетворює значення за допомогою числового перетворення (отже "0" стає 0), 
тоді як явне булеве перетворення використовує інший набір правил.

10 Що є результатом let b = "0"; alert( Boolean(b) ); Чому?

true, бо при порівнянні значень різних типів JavaScript призводить кожне з них до числа.

11 Що є результатом let a = 0; let b = "0"; alert(a == b);

true, бо при порівнянні значень різних типів JavaScript призводить кожне з них до числа.

----------------- Питання до блоку №4 - вирази (statements) -----------------

01 Вставте пропущене слово: … завершує поточний цикл, перемикач або оператор мітки і передає керування 
програмою в оператор. Де використовується?

break, використовується у циклах.

02 Вставте пропущене слово: … перериває  виконання операторів у поточній ітерації і продовжує 
виконання циклу з наступною ітерацією. Де використовується?

continue, використовується у циклах.

03 Вставте пропущене слово: … обчислює вираз, узгоджуючи значення виразу з реченням case, 
і виконує оператори, пов'язані з цим регістром.

switch.

04 Вставте пропущене слово: … викидає визначений користувачем виняток. Де використовується?

throw, використовується щоб викинути винятокб наприклад у функціях.

05 Вставте пропущене слово: … вказує значення, яке повертається функцією. Що повернеться, 
якщо просто написати цей вираз без значення?

return, якщо пропустити значення return, то буде underfined.

06 Вставте пропущене слово: … Створює цикл, який виконує вказаний оператор, поки умова не отримає 
значення false. Зазначений оператор виконується принаймні один раз.

do while.

07 Приведіть приклад використання циклу for … in та for … of. Чим вони між собою відрізняються?

let person = {fname:"John", lname:"Doe", age:25};

let text = "";
let x;
for (x in person) {
  text += person[x] + " ";
}

for (x of person) {
  text += person[x] + " ";
}

for of перебирає об'єкти через властивості значень.
for in перебирає об'єкти через властивості назв.


08 Вставте пропущене слово: … створює цикл, який виконує вказаний оператор, якщо умова має значення true. 
Умова оцінюється перед виконанням оператора.

while.


--------------- Питання до блоку №5.1 - функції ------------

01 Який вигляд має оголошення функції

function someName (parameters) {
    ...smth to do
    return ..smth to return
}

someName(...args)

02 Якими змінними стають значення, що передані у функцію? Локальні чи глобальні? Що це значить?

Локальними, це значить, що вони не можуть бути визвані поза функцією.

03 Функції мають доступ до локальних чи глобальних змінних?

Мають доступ до глобальних змінних.

04 Як з функції повернути значення? Який буде результат функції, якщо нічого не повернути?

За допомогою return. Якщо нічого не повернути, то буде return underfined.

05 Як повернути довгий вираз? Як правильно переносити довгий вираз на нову строку, щоб  
значення було повернуто?

Завернути вираз у дужки. Щоб перенести довгий вираз на нову строку потрібно почати його
на тому ж рядку що return.

06 Як встановити параметри за замовчуванням?

За допомогою оператору присвоєння.

07 Що таке параметр та аргумент?

Параметр - це те, за допомогою чого ми передаємо інформацію до функції.
Аргумент - це те, які саме значення будуть використовуватись у функції.



------------- Питання до блоку №5.2 - Function Expression та Function Declaration ---------------

01 Який синтаксис у Function Expression та Function Declaration

У Function Declaration синтаксис:
function name(){
    ...to do
}


У Function Expression синтаксис:

let foo = function name(){
    ...to do
}

02 Чи можна в аргумент функції передавати функцію? Як називають функцію, котру передають?

Можна. Ця функція назівається функція-колбек.

03 Яку функцію називають анонімною, який в неї синтаксис? Чи можемо ми до неї звернутися?

Анонімна фцнкція - це функція без імені. Ми не можемо звернутися до неї поза функцією.

04 Якщо функція оголошена як окрема інструкція в основному потоці коду, то це …

Function Declaration

05 Якщо функція була створена як частина виразу, то вважається, що ця функція оголошена як …

Function Expression

06 … обробляються перед виконанням блоку коду, в якому вона була визначена. Їх видно в усьому блоці

Function Declaration

07 … створюються, тільки коли потік виконання досягає їх

Function Expression

08 Чи доступна функція в глобальній області видимості, якщо вона була визначена в блоці?

Так.

-------------- Питання до блоку №5.3 - Функції-стрілки -----------

01 Чим стрілкові функції відрізняються від звичайної функції

При зверненні до this у стрідкових функціях, його значення береться зовні. Запис коротше.

02 Чого в них немає, що є у звичайних функціях

У стрілкових функціях немає this. Стрілкові функції не можна використовувати з new.

03 Який синтаксис визначення Функції-стрілки

let a = (b) => {
    ...to do
}

04 Навіщо їх використовувати. Дивись слайд 75

При зверненні до this у стрідкових функціях, його значення береться зовні, це потрібно для ітерації 
всередині методу об'єкта.

05 Перепишіть стрілкову функцію у Function Expression: const splitName = (name) => name.split(‘’); 
Що робить дана функція?

const splitName = function(name) {
    name.split(‘’);
    return name
}

splitName(Elika)

Ця функція повертає масив імені розділений на літери.

06 Чи можливо створити екземпляр класу стрілкової функції?

Ні.

----------------- Питання до блоку №6 - Упаковка / розпаковка ------------

01 Рядок ‘Helen’ це об'єкт ? Обґрунтуйте

І так і ні. 'Helen' це рядок, але при, наприклад, перетворенні рядка, він упаковується в об'экт, 
зробить потрібні дії, та повернеться назад до рядка.

02 Рядки, логічні значення, null і числа мають методи?

У рядків, логічних значень та чисел є методи.

03 Як на примітивному типі викликати метод? Чому це можливо?

Наприклад так: 
let x = 3;
x.toString();

Це можливо завдяки упакукавці та разпаковці.

04 Чи можна власноруч упакувати примітивний тип? Якщо так, то як?

Можна. Наприклад:

let a = new String('0.1 kek');
let b = parseFloat(a);
console.log(b)

05 Як розпакувати упаковане значення?

b.valueOf()

06 Як на числі викликати метод? Наприклад toString()

let num = 1;
num.toString();

07 Чи можливо працювати з примітивними типами як з об’єктами? 

Так.

08 Чому після упакування примітивного типу в об’єкт (наприклад числа), ми надалі можемо 
до нього звертатися як до значення числа, а не до об’єкта?

Це можливо завдяки упакукавці та разпаковці.

09 Де в об’єкті записані методи, що ми викликаємо на об’єктах примітивних типів?

Методи записані у властивостях об'єктів, в які записані функції.


---------- Питання до блоку №7.1 - Тип число, методи чисел -----------

01 Способи короткого запису числа з нулями

За допомогою 'e', наприклад 1e1 = 10

02 Округлення за допомогою об’єкта Math. Які є методи, як вони працюють

Math.floor округляється до меншого.
Math.ceil округляється до більшого.
Math.round округляється до найбільшого цілого.

03 Які методи є в об’єкта Number

isFinite()
isInteger()
isNaN()
parseInt()
parseFloat()
toString()
toPrecision()
toFixed()
toExponential()

04 Неточні обчислення, де можна їх зустріти, наведіть приклади

При порівнянні, при роботі з великими числами.

05 До якого числа перетворюється пустий рядок? А рядок з пробілом?

обидва перетворюються до нуля.

06 Чи дорівнює NaN самому собі (використовуючи точне і неточне порівняння). Який є другий та третій 
варіант перевірки?

Ні.
isNaN(NaN);
isNaN(Number.NaN);

07 Чи рівні значення 0 та -0(використовуючи точне і неточне порівняння). Який є другий варіант 
перевірки? Яким буде результат?

Так.
false == 0 //true
false === 0 //false

08 Способи перетворення не числа в число. Які є методи та в чому їх відмінність 

+ перетворює до числа якщо, наприклад строка, є числом.
Number() перетворює до числа якщо, наприклад строка, є числом.
parseInt() перетворює до числа та повертає ціле число.
parseFloat() перетворює до числа та повертає число з крапкою.


---------- Питання до блоку №7.2 - Тип строка, методи строк -------------

01 Які спецсимволи вам відомі, назовіть декілька

\n
\'
\"
\\

02 Як дізнатися довжину рядка

За допомогою властивості length

03 Як отримати першу літеру в строці? А останню? Які є варіанти та чим вони відрізняються

Першу літеру за допомогою індексу або charAt(0). Якщо символ з індексом 0 відсутній, 
тоді [] поверне undefined, а charAt - порожній рядок.
Останню літеру за допомогою length -1

04 Чи можна змінити символ в строці ? Якщо так, наведіть приклад.

Так. За допомогою індекса
let a = 'Літера';
a = 'Л' + str[1];

05 Як змінити регістр до великої/малої літери у строці?

За допомогою методів toLowerCase () і toUpperCase ()

06 Пошук підрядка. Які є способи, в чому різниця?

indexOf(substr, pos) - шукає підрядок substr в рядку str, починаючи з позиції pos, і повертає позицію, 
на якій розташовується збіг.
lastIndexOf(substr, position) - шукає з кінця рядка до її початку.
includes(substr, pos) - повертає true, якщо в рядку str є підрядок substr, або false, якщо немає.
startsWith - перевіряє чи починається рядок певної рядком.
endsWith - перевіряє чи закінчується рядок певної рядком.

07 Отримання булевого типу, як результат пошуку підрядка. Які є способи, в чому різниця?

includes(substr, pos)
startsWith
endsWith 

08 Як відбувається порівняння рядків?

Рядки порівнюються посимвольно в алфавітному порядку.

09 Як дізнатися код символа? Як дізнатися по коду символа літеру? На чому викликаються дані методи?

str.codePointAt(pos)
String.fromCodePoint(code)
Рядки кодуються в UTF-16

----------- Питання до блоку №7.3 ---------

01 Варіанти для створення масиву
02 Доповни речення: впорядкована колекція елементів, що підтримує додавання елементу в кінець та видалення елементу на початку називається … . Наведіть приклад з життя
03 Доповни речення: впорядкована колекція елементів, що підтримує додавання елементу в кінець та видалення останнього елементу називається … . Наведіть приклад з життя
04 Що означає копіювання за посиланням? Що означає зберігання по значенню?
05 Що повертають методи forEach, map, concat, filter, find, findIndex, slice, sort. 
06 Які ви знаєте методи об’єкту? Що вони повертають?


*/
